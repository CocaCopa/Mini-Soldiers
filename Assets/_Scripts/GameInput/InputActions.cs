//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_Scripts/GameInput/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Motion"",
            ""id"": ""86f45141-bc6c-4699-9d64-eeb1a73cd6ea"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ecd26677-2b4c-4cbe-9d6b-b9614672cf87"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""47021fd7-75f9-42c8-9f88-c806d8d1e522"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""86642b73-90e5-4ec1-a46b-3f9cfa1e19ff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""099a2840-3c0d-447c-b081-bfff7f6c5529"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ffad2fa8-52fe-4460-b3d7-eef8e418e499"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""80937b9a-fc17-48b6-b7d0-77daf31cab0d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9e77548d-f3c1-4b30-9b92-a59c6fd05744"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ac8c6389-b4c2-4615-9b7d-4db1b19c0ff8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aa297a50-dee4-473e-a8cf-d08008d78c95"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c1455dcc-9887-4994-9a69-5cfe303a469c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8e10c31a-5048-4463-9241-3220cb28fa49"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b1b27f66-3401-45c5-8d25-ea35f1620467"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e2584f5f-8d0c-4f0d-a69b-28668fc42db8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""b31866fc-d65a-4713-99f0-d843cfdbddf7"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""fbe523e2-5e5e-42d2-ae04-b66b610e610a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b387b7b7-178a-49c0-8903-dd8ee28e81ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimarySwitch"",
                    ""type"": ""Button"",
                    ""id"": ""fa1d0591-a776-4b73-8bfd-0f1e9365a0c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondarySwitch"",
                    ""type"": ""Button"",
                    ""id"": ""4498ad9f-6e2b-401b-be47-88deab091c0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MeleeSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""b31d0fbd-4738-4394-85a7-b0e90cd31496"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""55e40e7a-b07a-440c-91a9-3de464d21fd3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6212d547-006d-40f9-8a31-4bc1d7406c32"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimarySwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c52b63ab-5552-49dc-b9cf-e6675cd0ec6f"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondarySwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5090b333-59ae-4326-8749-f118fa4912b1"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a05b39f-81e2-4b6c-8de0-85b4362b6ca3"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Motion
        m_Motion = asset.FindActionMap("Motion", throwIfNotFound: true);
        m_Motion_Movement = m_Motion.FindAction("Movement", throwIfNotFound: true);
        m_Motion_Run = m_Motion.FindAction("Run", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Fire = m_Combat.FindAction("Fire", throwIfNotFound: true);
        m_Combat_Reload = m_Combat.FindAction("Reload", throwIfNotFound: true);
        m_Combat_PrimarySwitch = m_Combat.FindAction("PrimarySwitch", throwIfNotFound: true);
        m_Combat_SecondarySwitch = m_Combat.FindAction("SecondarySwitch", throwIfNotFound: true);
        m_Combat_MeleeSwitch = m_Combat.FindAction("MeleeSwitch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Motion
    private readonly InputActionMap m_Motion;
    private List<IMotionActions> m_MotionActionsCallbackInterfaces = new List<IMotionActions>();
    private readonly InputAction m_Motion_Movement;
    private readonly InputAction m_Motion_Run;
    public struct MotionActions
    {
        private @InputActions m_Wrapper;
        public MotionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Motion_Movement;
        public InputAction @Run => m_Wrapper.m_Motion_Run;
        public InputActionMap Get() { return m_Wrapper.m_Motion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MotionActions set) { return set.Get(); }
        public void AddCallbacks(IMotionActions instance)
        {
            if (instance == null || m_Wrapper.m_MotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MotionActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(IMotionActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(IMotionActions instance)
        {
            if (m_Wrapper.m_MotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMotionActions instance)
        {
            foreach (var item in m_Wrapper.m_MotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MotionActions @Motion => new MotionActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_Fire;
    private readonly InputAction m_Combat_Reload;
    private readonly InputAction m_Combat_PrimarySwitch;
    private readonly InputAction m_Combat_SecondarySwitch;
    private readonly InputAction m_Combat_MeleeSwitch;
    public struct CombatActions
    {
        private @InputActions m_Wrapper;
        public CombatActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Combat_Fire;
        public InputAction @Reload => m_Wrapper.m_Combat_Reload;
        public InputAction @PrimarySwitch => m_Wrapper.m_Combat_PrimarySwitch;
        public InputAction @SecondarySwitch => m_Wrapper.m_Combat_SecondarySwitch;
        public InputAction @MeleeSwitch => m_Wrapper.m_Combat_MeleeSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @PrimarySwitch.started += instance.OnPrimarySwitch;
            @PrimarySwitch.performed += instance.OnPrimarySwitch;
            @PrimarySwitch.canceled += instance.OnPrimarySwitch;
            @SecondarySwitch.started += instance.OnSecondarySwitch;
            @SecondarySwitch.performed += instance.OnSecondarySwitch;
            @SecondarySwitch.canceled += instance.OnSecondarySwitch;
            @MeleeSwitch.started += instance.OnMeleeSwitch;
            @MeleeSwitch.performed += instance.OnMeleeSwitch;
            @MeleeSwitch.canceled += instance.OnMeleeSwitch;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @PrimarySwitch.started -= instance.OnPrimarySwitch;
            @PrimarySwitch.performed -= instance.OnPrimarySwitch;
            @PrimarySwitch.canceled -= instance.OnPrimarySwitch;
            @SecondarySwitch.started -= instance.OnSecondarySwitch;
            @SecondarySwitch.performed -= instance.OnSecondarySwitch;
            @SecondarySwitch.canceled -= instance.OnSecondarySwitch;
            @MeleeSwitch.started -= instance.OnMeleeSwitch;
            @MeleeSwitch.performed -= instance.OnMeleeSwitch;
            @MeleeSwitch.canceled -= instance.OnMeleeSwitch;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);
    public interface IMotionActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnPrimarySwitch(InputAction.CallbackContext context);
        void OnSecondarySwitch(InputAction.CallbackContext context);
        void OnMeleeSwitch(InputAction.CallbackContext context);
    }
}
